import asm65816
import ccexpand
import movscr_codes
import movscr_memaccess	// cooprocks123e's implemenation of memory access (read/write)
import Bowspr
import BowsprCC
import IsoBattleSystem_Flags
import battle_menu
import menu_macros
import change_sprite_group

/*
TODO: 	. Incorprate the rest of the battle animations to the other party members
		. Something... forgot what it was though
*/
//+=+=+=+=+=+= Defines =+=+=+=+=+=+=+
define wait_for_action 		= "[1F 61]"
define AS_NESS_X_POS 		= 0x38
define AS_PAULA_X_POS	 	= 0x54
define AS_JEFF_X_POS	 	= 0x6C
define AS_POO_X_POS 		= 0x84
define AS_FRONT_ROW_Y_POS 	= 0x80
define AS_BACK_ROW_Y_POS	= 0x88
define CURRENT_PARTY_ADDR 	= 0x988B	// length 7 Bytes
define PTY_BTLR_ADDR		= 0x9FAC
define PTY_BTLR_STRUCT_SIZE = 0x4E
define POO_MIRROR_TURN_COUNT= 0xAA62
define MIRROR_ENEMY_ID		= 0xAA12
define ENEMY_CONFIG_TABLE 	= 0xD59589

define TIME_ACT_TO_IDLE		= 1			// In Frames

// Action Script Sprite Direction
define N  = 1
define E  = 2
define S  = 3
define W  = 6
define NE = 8
define SE = 9
define SW = 10
define NW = 11


//+=+=+= Ness' Sprite Group Defines =+=+=+
define NESS_IDLE_SPRITE 	= 1
define NESS_UNCON_SPRITE	= 8
define NESS_DIA_SPRITE 		= 12
define NESS_PARA_SPRITE		= 13
define NESS_NAUS_SPRITE		= 1
define NESS_POIS_SPRITE		= 1
define NESS_SUNS_SPRITE		= 1
define NESS_COLD_SPRITE		= 1
define NESS_MUSH_SPRITE		= 1
define NESS_POSS_SPRITE		= 1
define NESS_SLEEP_SPRITE	= 16
define NESS_CRY_SPRITE		= 1
define NESS_IMMOB_SPRITE	= 13
define NESS_SOLID_SPRITE	= 13
define NESS_FEELS_SPRITE	= 1
define NESS_CNTCON_SPRITE	= 1
define NESS_HMSIK_SPRITE	= 1

define NESS_ATK_SPRITE 		= 13
define NESS_PSI_SPRITE		= 6
define NESS_GOODS_SPRITE	= 1
define NESS_DEF_SPRITE		= 5
define NESS_RUNAWAY_SPRITE	= 1
define NESS_VICTORY_SPRITE	= 14


//+=+=+= Paula's Sprite Group Defines =+=+=+
define PAULA_IDLE_SPRITE 	= 2
define PAULA_UNCON_SPRITE	= 9
define PAULA_DIA_SPRITE 	= 12
define PAULA_PARA_SPRITE	= 13
define PAULA_NAUS_SPRITE	= 2
define PAULA_POIS_SPRITE	= 2
define PAULA_SUNS_SPRITE	= 2
define PAULA_COLD_SPRITE	= 2
define PAULA_MUSH_SPRITE	= 2
define PAULA_POSS_SPRITE	= 2
define PAULA_SLEEP_SPRITE	= 16
define PAULA_CRY_SPRITE		= 2
define PAULA_IMMOB_SPRITE	= 13
define PAULA_SOLID_SPRITE	= 13
define PAULA_FEELS_SPRITE	= 2
define PAULA_CNTCON_SPRITE	= 2
define PAULA_HMSIK_SPRITE	= 2

define PAULA_ATK_SPRITE		= 13
define PAULA_PSI_SPRITE		= 2
define PAULA_GOODS_SPRITE	= 2
define PAULA_DEF_SPRITE		= 25
define PAULA_PRAY_SPRITE	= 2
define PAULA_RUNAWAY_SPRITE	= 2
define PAULA_VICTORY_SPRITE	= 2


//+=+=+= Jeff's Sprite Group Defines =+=+=+
define JEFF_IDLE_SPRITE 	= 3
define JEFF_UNCON_SPRITE	= 10
define JEFF_DIA_SPRITE 		= 12
define JEFF_PARA_SPRITE		= 13
define JEFF_NAUS_SPRITE		= 3
define JEFF_POIS_SPRITE		= 3
define JEFF_SUNS_SPRITE		= 3
define JEFF_COLD_SPRITE		= 3
define JEFF_MUSH_SPRITE		= 3
define JEFF_POSS_SPRITE		= 3
define JEFF_SLEEP_SPRITE	= 16
define JEFF_CRY_SPRITE		= 3
define JEFF_IMMOB_SPRITE	= 13
define JEFF_SOLID_SPRITE	= 13
define JEFF_FEELS_SPRITE	= 3
define JEFF_CNTCON_SPRITE	= 3
define JEFF_HMSIK_SPRITE	= 3

define JEFF_ATK_SPRITE		= 13
define JEFF_SPY_SPRITE		= 3
define JEFF_GOODS_SPRITE	= 3
define JEFF_DEF_SPRITE		= 25
define JEFF_RUNAWAY_SPRITE	= 3
define JEFF_VICTORY_SPRITE	= 3


//+=+=+= Poo's Sprite Group Defines =+=+=+
define POO_IDLE_SPRITE 		= 4
define POO_UNCON_SPRITE		= 11
define POO_DIA_SPRITE 		= 12
define POO_PARA_SPRITE		= 13
define POO_NAUS_SPRITE		= 4
define POO_POIS_SPRITE		= 4
define POO_SUNS_SPRITE		= 4
define POO_COLD_SPRITE		= 4
define POO_MUSH_SPRITE		= 4
define POO_POSS_SPRITE		= 4
define POO_SLEEP_SPRITE		= 16
define POO_CRY_SPRITE		= 4
define POO_IMMOB_SPRITE		= 13
define POO_SOLID_SPRITE		= 13
define POO_FEELS_SPRITE		= 4
define POO_CNTCON_SPRITE	= 4
define POO_HMSIK_SPRITE		= 4

define POO_ATK_SPRITE		= 13
define POO_PSI_SPRITE		= 4
define POO_MIRROR_SPRITE	= 106
define POO_GOODS_SPRITE		= 4
define POO_DEF_SPRITE		= 25
define POO_RUNAWAY_SPRITE	= 4
define POO_VICTORY_SPRITE	= 4

//+=+=+=+=+=+= Commands =+=+=+=+=+=+=+
// Tie sprite position relative to the correct layer (windows layer) based on BGMODE (0x000F).
// Thanks Vittorio
command Vittorio_bowspr_preamble {

m_get_mem16(0x000F) m_and_result(1) m_jeq(M_mode0)

M_mode1: m_onposition(0xA055) m_jmp(M_continue)
M_mode0: m_onposition(0xA023)

M_continue:
// start the actionscript here.
}

//+=+=+=+=+=+= Text / Control Codes =+=+=+=+=+=+=+

NPC:
	set(DISABLE_SWIRL_FLAG)
	unset(NESS_ATK_FLAG)
	unset(NESS_DEF_FLAG)
	unset(NESS_PSI_FLAG)
	unset(NESS_GOODS_FLAG)
	
	unset(PAULA_ATK_FLAG)
	unset(PAULA_DEF_FLAG)
	unset(PAULA_PSI_FLAG)
	unset(PAULA_GOODS_FLAG)
	
	unset(JEFF_ATK_FLAG)
	unset(JEFF_DEF_FLAG)
	unset(JEFF_SPY_FLAG)
	unset(JEFF_GOODS_FLAG)
	
	unset(POO_ATK_FLAG)
	unset(POO_DEF_FLAG)
	unset(POO_PSI_FLAG)
	unset(POO_GOODS_FLAG)
	
	party_add(2)
	party_add(3)
	party_add(4)
	//"[19 05 01 02 03]"
	music(0x82)
	battle(171)
	eob
	
DogEncounter:	
	"@You engage " call(0xEF794B) "[03]" eob
	
Hide:
	window_open(1)
	"@Hiding the players" next
	"[1F E5 FF]"
	hide_party
	window_closeall
	eob
	
Show:
	window_open(1)
	"@Showing the players" next
	"[1F E8 FF]"
	show_party(1)
	window_closeall
	eob
	
Test:
	"@This is a test" next
	eob
	
/* WARNING: DO NOT LET ENEMIES USE THE SAME BATTLE ACTION ID THAT ANY PARTY MEMBER USES.
			Reason being is that you will soft lock your game because the game will wait
			for a flag to be set during the text portion of the attack if the enemy uses
			the same battle action. Each party member's battle action should be unique
			so that the flags can be set when they do their regular attacks.
*/

Ness_Bash:
    sound(SND_HEROATTACK) "@{user} attacks! [03]"
	set(NESS_ATK_FLAG)
	wait_for_action
	eob
	
Paula_Bash:
    sound(SND_HEROATTACK) "@{user} attacks! [03]"
	set(PAULA_ATK_FLAG)
	wait_for_action
	eob
	
Jeff_Bash:
    sound(SND_HEROATTACK) "@{user} attacks! [03]"
	set(JEFF_ATK_FLAG)
	wait_for_action
	eob
	
Poo_Bash:
    sound(SND_HEROATTACK) "@{user} attacks! [03]"
	set(POO_ATK_FLAG)
	wait_for_action
	eob
	
Jeff_Shoot:
    sound(SND_HEROATTACK) "@{user} attacks! [03]"
	set(JEFF_ATK_FLAG)
	wait_for_action
	eob

// NOTE: Order matters on which spirite gets loaded because the first one sets up
//       the palettes for the rest of the other characters to use
Create_Party_Spr:
	BowsprCC_Begin(0, 2)
	BowsprCC_CreateSprite(1, CreateNessBattleSprLogic)
	BowsprCC_CreateSprite(2, CreatePaulaBattleSprLogic)
	BowsprCC_CreateSprite(3, CreateJeffBattleSprLogic)
	BowsprCC_CreateSprite(4, CreatePooBattleSprLogic)
	
	eob

//+=+=+=+=+=+= Action Scripts =+=+=+=+=+=+=+

NPCActionScript: {
	m_set_anim(0)
	m_priority(0)
    m_refresh_graphics_frame0
    m_task_long (MovTask_Anim16_DestroyIfFar)

loop:
	m_wait_until_touch
	//m_textcall2(Hide)
	//m_pause(60)
	
	//m_textcall2(Show)
	//m_pause(60)
	
	m_textcall(NPC)
	m_pause(60)
	
	m_jmp (loop)
}	

/////////////////////////////////////////////////////////////////

/*
WARNING: Mushroomizing or having the party being possessed too much will make the
		 battle sprites have some parts of them being replaced by the tiny mushroom
		 or lil ghost sprite, so make sure that your enemies don't mushroomized or possess
		 too much.
		 
		 Might not be a problem if you don't have a way to recover being mushroomized or 
		 possessed during battle, but leaving this here just in case if you do come across 
		 something akin to this.
*/

//=+=+=+=+=+ NESS ANIMATIONS +=+=+=+=+=

Ness_Create_Mushroom:
	BowsprCC_CreateSprite(226, NessCreateMushroom)
	eob
	
Ness_Create_TinyGhost:
	BowsprCC_CreateSprite(264, NessCreateTinyGhost)
	eob

NessCreateMushroom: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(NESS_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x1E)
	m_rtovar7		// Ness's Sprite Changing status

Loop:
	m_get_var7
	m_get_mem8_at_result
	m_and_result(0x01)
	m_multijmp(2)
		short End
		short LoopBack
	m_jmp (End)
	
LoopBack:
	m_pause(1)
	m_jmp(Loop)
	
End:
	m_destroy_self
}


NessCreateTinyGhost: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(NESS_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x1E)
	m_rtovar7		// Ness's Sprite Changing status
	m_set_var6(0)	// Frame count for our Sine function in Y direction
	m_set_var3(0x40)// Frame count for our Sine function in x direction
	m_set_var5(0)	// Ghost Direction Flag to check to add or subtract y-pos from the sine function
	m_set_var2(0)	// Ghost Direction Flag to check to add or subtract x-pos from the sine function
	m_set_var4(0)	// Return Value from the Sine funciton
	m_asmcall(ASM_GetObjYPosToResult)
	m_rtovar0		// var0 is the initial position of the ghost sprite's y-Pos
	m_asmcall(ASM_GetObjXPosToResult)
	m_rtovar1		// var1 is the initial position of the ghost sprite's x-pos
	
Loop:
	m_get_var7
	m_get_mem8_at_result
	m_and_result(0x02)
	m_multijmp(3)
		short End
		short End
		short Continue
	m_jmp (End)
	
Continue:
	m_asmcall(ASM_CalcTinyGhostPos)
	
LoopBack:
	m_pause(2)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

CreateNessBattleSprLogic: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(3)
	
	m_get_mem16(0x988B)
	m_and_result(0xFF)
	m_add_result(-1)
	m_jne(End)
	
	m_set_xpos(AS_NESS_X_POS)
	m_set_ypos(AS_FRONT_ROW_Y_POS)
	m_set_facing_anim(NE, 0)
						
	m_set_result(PTY_BTLR_ADDR)
	m_rtovar7			// Var7 contains Ness's Battler address
	m_set_result(0)	
	m_rtovar6			// Var6 is Ness' possession/mushroomized status
						// 0x01 = Mushroomized, 0x02 = Possessed
	
Loop:
	m_get_flag(VICTORY_FLAG)
	m_jne(Victory)
	
	m_pause(1)
		
Attack:
	m_get_flag(NESS_ATK_FLAG)
	m_jeq(Goods)
	
	m_unlock_text
	
	MOV_ChangeSpriteGroup(NESS_ATK_SPRITE)
	NessAttackAnimation
	
	m_unset_flag(NESS_ATK_FLAG)
	m_jmp(Loop_Back)
	
Goods:
	m_get_flag(NESS_GOODS_FLAG)
	m_jeq(Defend)
	
	MOV_ChangeSpriteGroup(NESS_GOODS_SPRITE)
	
	GoodsLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		NessGoodsAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short GoodsContinue
			short GoodsUnconscious
			short GoodsDiamondized
			
	GoodsContinue:
		m_get_flag(NESS_GOODS_FLAG)
		m_jne(GoodsLockingWait)
		m_jmp(Loop_Back)
		
	GoodsUnconscious:
		m_unset_flag(NESS_GOODS_FLAG)
		m_jmp(Unconscious)

	GoodsDiamondized:
		m_unset_flag(NESS_GOODS_FLAG)
		m_jmp(Diamondized)
	
Defend:
	m_get_flag(NESS_DEF_FLAG)
	m_jeq(PSI)
	
	MOV_ChangeSpriteGroup(NESS_DEF_SPRITE)
	
	DefendLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		NessDefendAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short DefendContinue
			short DefendUnconscious
			short DefendDiamondized
			
		DefendContinue:
			m_get_flag(NESS_DEF_FLAG)
			m_jne(DefendLockingWait)
			m_jmp(Loop_Back)
		
		DefendUnconscious:
			m_unset_flag(NESS_DEF_FLAG)
			m_jmp(Unconscious)
		
		DefendDiamondized:
			m_unset_flag(NESS_DEF_FLAG)
			m_jmp(Diamondized)
	
PSI:
	m_get_flag(NESS_PSI_FLAG)
	m_jeq(RunAway)
	
	MOV_ChangeSpriteGroup(NESS_PSI_SPRITE)
	
	PSILockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)	

		NessPSIAnimation
			
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short PSIContinue
			short PSIUnconscious
			short PSIDiamondized
		
	PSIContinue:
		m_get_flag(NESS_PSI_FLAG)
		m_jne(PSILockingWait)
		m_jmp(Loop_Back)
	
	PSIUnconscious:
		m_unset_flag(NESS_PSI_FLAG)
		m_jmp(Unconscious)
		
	PSIDiamondized:
		m_unset_flag(NESS_PSI_FLAG)
		m_jmp(Diamondized)
	
RunAway:
	m_get_flag(PARTY_RUNAWAY_FLAG)
	m_jeq(StatusAffiction)
	
	MOV_ChangeSpriteGroup(NESS_RUNAWAY_SPRITE)
	
	RunawayLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		NessRunawayAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short RunAwayContinue
			short RunAwayUnconscious
			short RunAwayDiamondized
		
	RunAwayContinue:
		m_get_flag(PARTY_RUNAWAY_FLAG)
		m_jne(RunawayLockingWait)
		m_jmp(Loop_Back)
		
	RunAwayUnconscious:
		m_jmp(Unconscious)
		
	RunAwayDiamondized:
		m_jmp(Diamondized)
	
StatusAffiction:
	CheckHomesickness:
		m_get_var7
		m_add_result(0x22)
		m_get_mem8_at_result
		m_jne(Homesickness)
	
	CheckCannotConcentrate:
		m_get_var7
		m_add_result(0x21)
		m_get_mem8_at_result
		m_jne(CannotConcentrate)
		
	CheckFeelingStrange:
		m_get_var7
		m_add_result(0x20)
		m_get_mem8_at_result
		m_jne(FeelingStrange)
		
	CheckInOverworldAffliction:
		m_get_var7
		m_add_result(0x1E)
		m_get_mem8_at_result
		m_multijmp(3)
			short CheckInBattleAffliction
			short Mashroomized
			short Possessed
		
	CheckInBattleAffliction:
		m_set_result(0)
		m_rtovar6
		
		m_get_var7
		m_add_result(0x1F)
		m_get_mem8_at_result
		m_multijmp(5)
			short CheckPermanentAffliction
			short Sleeping
			short Crying
			short Immobilized
			short Solidified
		
	CheckPermanentAffliction:
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_jeq(Normal)
		m_multijmp(8)
			short Normal
			short Unconscious
			short Diamondized
			short Paralized
			short Nauseous
			short Poisoned
			short Sunstroke
			short Cold
	
Normal:
	MOV_ChangeSpriteGroup(NESS_IDLE_SPRITE)
	NessIdleAnimation
	m_jmp(Loop_Back)
	
Unconscious:
	MOV_ChangeSpriteGroup(NESS_UNCON_SPRITE)
	NessUnconsciousAnimation
	m_jmp(Loop_Back)
	
Diamondized:
	MOV_ChangeSpriteGroup(NESS_DIA_SPRITE)
	NessDiamondizedAnimation
	m_jmp(Loop_Back)

Paralized:
	MOV_ChangeSpriteGroup(NESS_PARA_SPRITE)
	NessParalizedAnimation
	m_jmp(Loop_Back)

Nauseous:
	MOV_ChangeSpriteGroup(NESS_NAUS_SPRITE)
	NessNauseousAnimation
	m_jmp(Loop_Back)
	
Poisoned:
	MOV_ChangeSpriteGroup(NESS_POIS_SPRITE)
	NessPoisonedAnimation
	m_jmp(Loop_Back)

Sunstroke:
	MOV_ChangeSpriteGroup(NESS_SUNS_SPRITE)
	NessSunstrokeAnimation
	m_jmp(Loop_Back)

Cold:
	MOV_ChangeSpriteGroup(NESS_COLD_SPRITE)
	NessColdAnimation
	m_jmp(Loop_Back)

Mashroomized:
	m_get_var6
	m_and_result(0x01)
	m_jne(Mashroomized_Continue)
	
	m_textcall2(Ness_Create_Mushroom)
	m_get_var6
	m_or_result(0x01)
	m_rtovar6
	
	Mashroomized_Continue:
		MOV_ChangeSpriteGroup(NESS_MUSH_SPRITE)
		NessMashroomizedAnimation
		
	m_jmp(Loop_Back)

Possessed:
	m_get_var6
	m_and_result(0x02)
	m_jne(Possessed_Continue)
	
	m_textcall2(Ness_Create_TinyGhost)
	m_get_var6
	m_or_result(0x02)
	m_rtovar6

	Possessed_Continue:
		MOV_ChangeSpriteGroup(NESS_POSS_SPRITE)
		NessPossessedAnimation
	
	m_jmp(Loop_Back)

Sleeping:
	MOV_ChangeSpriteGroup(NESS_SLEEP_SPRITE)
	NessSleepingAnimation
	m_jmp(Loop_Back)

Crying:
	MOV_ChangeSpriteGroup(NESS_CRY_SPRITE)
	NessCryingAnimation
	m_jmp(Loop_Back)

Immobilized:
	MOV_ChangeSpriteGroup(NESS_IMMOB_SPRITE)
	NessImmobilizedAnimation
	m_jmp(Loop_Back)

Solidified:
	MOV_ChangeSpriteGroup(NESS_SOLID_SPRITE)
	NessSolidifedAnimation
	m_jmp(Loop_Back)

FeelingStrange:
	MOV_ChangeSpriteGroup(NESS_FEELS_SPRITE)
	NessFeelingStrangeAnimation
	m_jmp(Loop_Back)

CannotConcentrate:
	MOV_ChangeSpriteGroup(NESS_CNTCON_SPRITE)
	NessCannotConcentrateAnimation
	m_jmp(Loop_Back)

Homesickness:
	MOV_ChangeSpriteGroup(NESS_HMSIK_SPRITE)
	NessHomesicknessAnimation
	m_jmp(Loop_Back)
	
Loop_Back:
	m_jmp(Loop)
	
Victory:
	// Turn around to face camera
	m_set_facing_anim(NE, 0)
	m_pause(5)
	m_set_facing_anim(E, 0)
	m_pause(5)
	m_set_facing_anim(SE, 0)
	m_pause(5)
	m_set_facing_anim(S, 0)
	m_pause(5)
	
	MOV_ChangeSpriteGroup(NESS_VICTORY_SPRITE)
	
	VictoryAnimLoop:
		NessVictoryAnimation
		m_jmp(VictoryAnimLoop)

End:
	m_destroy_self
}

define NessIdleAnimation = {	
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessAffIdleAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessAttackAnimation = {
	m_set_facing_anim(NE, 0)
	
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
}

define NessGoodsAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define NessDefendAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define NessPSIAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define NessRunawayAnimation = {
	m_set_facing_anim(SW, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define NessUnconsciousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessDiamondizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessParalizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessNauseousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessPoisonedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessSunstrokeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessColdAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessMashroomizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessPossessedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessSleepingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessCryingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessImmobilizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessSolidifedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessFeelingStrangeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessCannotConcentrateAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessHomesicknessAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define NessVictoryAnimation = {
	m_set_facing_anim(S, 0)
	m_pause(1)
}

//+=+=+=+=+= PAULA ANIMATIONS =+=+=+=+=+=+

Paula_Create_Mushroom:
	BowsprCC_CreateSprite(226, PaulaCreateMushroom)
	eob
	
Paula_Create_TinyGhost:
	BowsprCC_CreateSprite(264, PaulaCreateTinyGhost)
	eob


PaulaCreateMushroom: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(PAULA_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)	// Offset to get Paula's data in battle
	m_add_result(0x1E)
	m_rtovar7		// Paula's Sprite Changing status

Loop:
	m_get_var7
	m_get_mem8_at_result
	m_multijmp(3)
		short End
		short LoopBack
		short End
	m_jmp (End)
	
LoopBack:
	m_pause(1)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

PaulaCreateTinyGhost: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(PAULA_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)	// Paula's offset to the address
	m_add_result(0x1E)
	m_rtovar7		// Paula's Sprite Changing status
	m_set_var6(0)	// Frame count for our Sine function in Y direction
	m_set_var3(0x40)// Frame count for our Sine function in x direction
	m_set_var5(0)	// Ghost Direction Flag to check to add or subtract y-pos from the sine function
	m_set_var2(0)	// Ghost Direction Flag to check to add or subtract x-pos from the sine function
	m_set_var4(0)	// Return Value from the Sine funciton
	m_asmcall(ASM_GetObjYPosToResult)
	m_rtovar0		// var0 is the initial position of the ghost sprite's y-Pos
	m_asmcall(ASM_GetObjXPosToResult)
	m_rtovar1		// var1 is the initial position of the ghost sprite's x-pos
	
Loop:
	m_get_var7
	m_get_mem8_at_result
	m_multijmp(3)
		short End
		short End
		short Continue
	m_jmp (End)
	
Continue:
	m_asmcall(ASM_CalcTinyGhostPos)
	
LoopBack:
	m_pause(2)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

CreatePaulaBattleSprLogic: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(3)
	
	m_get_mem16(0x988B)
	m_and_result(0xFF)
	m_add_result(-1)
	m_jne(End)
	
	m_set_xpos(AS_PAULA_X_POS)
	m_set_ypos(AS_BACK_ROW_Y_POS)
	m_set_facing_anim(NE, 0)
						
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)
	m_rtovar7			// Var7 contains Paula's Battler address
	m_set_result(0)	
	m_rtovar6			// Var6 is Paula's possession/mushroomized status
						// 0x01 = Mushroomized, 0x02 = Possessed
	
Loop:
	m_get_flag(VICTORY_FLAG)
	m_jne(Victory)
	
	m_pause(1)
		
Attack:
	m_get_flag(PAULA_ATK_FLAG)
	m_jeq(Goods)
	
	m_unlock_text
	
	MOV_ChangeSpriteGroup(PAULA_ATK_SPRITE)
	PaulaAttackAnimation
	
	m_unset_flag(PAULA_ATK_FLAG)
	m_jmp(Loop_Back)
	
Goods:
	m_get_flag(PAULA_GOODS_FLAG)
	m_jeq(Defend)
	
	MOV_ChangeSpriteGroup(PAULA_GOODS_SPRITE)
	
	GoodsLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PaulaGoodsAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short GoodsContinue
			short GoodsUnconscious
			short GoodsDiamondized
			
	GoodsContinue:
		m_get_flag(PAULA_GOODS_FLAG)
		m_jne(GoodsLockingWait)
		m_jmp(Loop_Back)
		
	GoodsUnconscious:
		m_unset_flag(PAULA_GOODS_FLAG)
		m_jmp(Unconscious)

	GoodsDiamondized:
		m_unset_flag(PAULA_GOODS_FLAG)
		m_jmp(Diamondized)
	
Defend:
	m_get_flag(PAULA_DEF_FLAG)
	m_jeq(PSI)
	
	MOV_ChangeSpriteGroup(PAULA_DEF_SPRITE)
	
	DefendLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PaulaDefendAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short DefendContinue
			short DefendUnconscious
			short DefendDiamondized
			
		DefendContinue:
			m_get_flag(PAULA_DEF_FLAG)
			m_jne(DefendLockingWait)
			m_jmp(Loop_Back)
		
		DefendUnconscious:
			m_unset_flag(PAULA_DEF_FLAG)
			m_jmp(Unconscious)
		
		DefendDiamondized:
			m_unset_flag(PAULA_DEF_FLAG)
			m_jmp(Diamondized)
	
PSI:
	m_get_flag(PAULA_PSI_FLAG)
	m_jeq(Pray)
	
	MOV_ChangeSpriteGroup(PAULA_PSI_SPRITE)
	
	PSILockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PaulaPSIAnimation
			
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short PSIContinue
			short PSIUnconscious
			short PSIDiamondized
		
	PSIContinue:
		m_get_flag(PAULA_PSI_FLAG)
		m_jne(PSILockingWait)
		m_jmp(Loop_Back)
	
	PSIUnconscious:
		m_unset_flag(PAULA_PSI_FLAG)
		m_jmp(Unconscious)
		
	PSIDiamondized:
		m_unset_flag(PAULA_PSI_FLAG)
		m_jmp(Diamondized)
		
Pray:
	m_get_flag(PAULA_PRAY_FLAG)
	m_jeq(RunAway)
	
	MOV_ChangeSpriteGroup(PAULA_PRAY_SPRITE)
	
	PrayLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PaulaPrayAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short PrayContinue
			short PrayUnconscious
			short PrayDiamondized
			
	PrayContinue:
		m_get_flag(PAULA_PRAY_FLAG)
		m_jne(PrayLockingWait)
		m_jmp(Loop_Back)
		
	PrayUnconscious:
		m_unset_flag(PAULA_PRAY_FLAG)
		m_jmp(Unconscious)

	PrayDiamondized:
		m_unset_flag(PAULA_PRAY_FLAG)
		m_jmp(Diamondized)
	
RunAway:
	m_get_flag(PARTY_RUNAWAY_FLAG)
	m_jeq(StatusAffiction)
	
	MOV_ChangeSpriteGroup(PAULA_RUNAWAY_SPRITE)
	
	RunawayLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PaulaRunawayAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short RunAwayContinue
			short RunAwayUnconscious
			short RunAwayDiamondized
		
	RunAwayContinue:
		m_get_flag(PARTY_RUNAWAY_FLAG)
		m_jne(RunawayLockingWait)
		m_jmp(Loop_Back)
		
	RunAwayUnconscious:
		m_jmp(Unconscious)
		
	RunAwayDiamondized:
		m_jmp(Diamondized)
	
StatusAffiction:
	CheckHomesickness:
		m_get_var7
		m_add_result(0x22)
		m_get_mem8_at_result
		m_jne(Homesickness)
	
	CheckCannotConcentrate:
		m_get_var7
		m_add_result(0x21)
		m_get_mem8_at_result
		m_jne(CannotConcentrate)
		
	CheckFeelingStrange:
		m_get_var7
		m_add_result(0x20)
		m_get_mem8_at_result
		m_jne(FeelingStrange)
		
	CheckInOverworldAffliction:
		m_get_var7
		m_add_result(0x1E)
		m_get_mem8_at_result
		m_multijmp(3)
			short CheckInBattleAffliction
			short Mashroomized
			short Possessed
		
	CheckInBattleAffliction:
		m_get_var7
		m_add_result(0x1F)
		m_get_mem8_at_result
		m_multijmp(5)
			short CheckPermanentAffliction
			short Sleeping
			short Crying
			short Immobilized
			short Solidified
		
	CheckPermanentAffliction:
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_jeq(Normal)
		m_multijmp(8)
			short Normal
			short Unconscious
			short Diamondized
			short Paralized
			short Nauseous
			short Poisoned
			short Sunstroke
			short Cold
	
Normal:
	MOV_ChangeSpriteGroup(PAULA_IDLE_SPRITE)
	PaulaIdleAnimation
	m_jmp(Loop_Back)
	
Unconscious:
	MOV_ChangeSpriteGroup(PAULA_UNCON_SPRITE)
	PaulaUnconsciousAnimation
	m_jmp(Loop_Back)
	
Diamondized:
	MOV_ChangeSpriteGroup(PAULA_DIA_SPRITE)
	PaulaDiamondizedAnimation
	m_jmp(Loop_Back)

Paralized:
	MOV_ChangeSpriteGroup(PAULA_PARA_SPRITE)
	PaulaParalizedAnimation
	m_jmp(Loop_Back)

Nauseous:
	MOV_ChangeSpriteGroup(PAULA_NAUS_SPRITE)
	PaulaNauseousAnimation
	m_jmp(Loop_Back)
	
Poisoned:
	MOV_ChangeSpriteGroup(PAULA_POIS_SPRITE)
	PaulaPoisonedAnimation
	m_jmp(Loop_Back)

Sunstroke:
	MOV_ChangeSpriteGroup(PAULA_SUNS_SPRITE)
	PaulaSunstrokeAnimation
	m_jmp(Loop_Back)

Cold:
	MOV_ChangeSpriteGroup(PAULA_COLD_SPRITE)
	PaulaColdAnimation
	m_jmp(Loop_Back)

Mashroomized:
	m_get_var6
	m_and_result(0x01)
	m_jne(Mashroomized_Continue)
	
	m_textcall2(Paula_Create_Mushroom)
	m_get_var6
	m_or_result(0x01)
	m_rtovar6
	
	Mashroomized_Continue:
		MOV_ChangeSpriteGroup(PAULA_MUSH_SPRITE)
		PaulaMashroomizedAnimation
		
	m_jmp(Loop_Back)

Possessed:
	m_get_var6
	m_and_result(0x02)
	m_jne(Possessed_Continue)
	
	m_textcall2(Paula_Create_TinyGhost)
	m_get_var6
	m_or_result(0x02)
	m_rtovar6

	Possessed_Continue:
		MOV_ChangeSpriteGroup(PAULA_POSS_SPRITE)
		PaulaPossessedAnimation
	
	m_jmp(Loop_Back)

Sleeping:
	MOV_ChangeSpriteGroup(PAULA_SLEEP_SPRITE)
	PaulaSleepingAnimation
	m_jmp(Loop_Back)

Crying:
	MOV_ChangeSpriteGroup(PAULA_CRY_SPRITE)
	PaulaCryingAnimation
	m_jmp(Loop_Back)

Immobilized:
	MOV_ChangeSpriteGroup(PAULA_IMMOB_SPRITE)
	PaulaImmobilizedAnimation
	m_jmp(Loop_Back)

Solidified:
	MOV_ChangeSpriteGroup(PAULA_SOLID_SPRITE)
	PaulaSolidifedAnimation
	m_jmp(Loop_Back)

FeelingStrange:
	MOV_ChangeSpriteGroup(PAULA_FEELS_SPRITE)
	PaulaFeelingStrangeAnimation
	m_jmp(Loop_Back)

CannotConcentrate:
	MOV_ChangeSpriteGroup(PAULA_CNTCON_SPRITE)
	PaulaCannotConcentrateAnimation
	m_jmp(Loop_Back)

Homesickness:
	MOV_ChangeSpriteGroup(PAULA_HMSIK_SPRITE)
	PaulaHomesicknessAnimation
	m_jmp(Loop_Back)
	
Loop_Back:
	m_jmp(Loop)
	
Victory:
	// Turn around to face camera
	m_set_facing_anim(NE, 0)
	m_pause(5)
	m_set_facing_anim(E, 0)
	m_pause(5)
	m_set_facing_anim(SE, 0)
	m_pause(5)
	m_set_facing_anim(S, 0)
	m_pause(5)
	
	MOV_ChangeSpriteGroup(PAULA_VICTORY_SPRITE)
	
	VictoryAnimLoop:
		PaulaVictoryAnimation
		m_jmp(VictoryAnimLoop)

End:
	m_destroy_self
}

define PaulaIdleAnimation = {	
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaAffIdleAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaAttackAnimation = {
	m_set_facing_anim(NE, 0)
	
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
}

define PaulaGoodsAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PaulaDefendAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PaulaPSIAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PaulaPrayAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PaulaRunawayAnimation = {
	m_set_facing_anim(SW, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PaulaUnconsciousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaDiamondizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaParalizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaNauseousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaPoisonedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaSunstrokeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaColdAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaMashroomizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaPossessedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaSleepingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaCryingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaImmobilizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaSolidifedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaFeelingStrangeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaCannotConcentrateAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaHomesicknessAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PaulaVictoryAnimation = {
	m_set_facing_anim(S, 0)
	m_pause(1)
}

//+=+=+=+=+= JEFF ANIMATIONS =+=+=+=+=+=+

Jeff_Create_Mushroom:
	BowsprCC_CreateSprite(226, JeffCreateMushroom)
	eob
	
Jeff_Create_TinyGhost:
	BowsprCC_CreateSprite(264, JeffCreateTinyGhost)
	eob


JeffCreateMushroom: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(JEFF_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)
	m_add_result(0x4E)	// Offset to get Jeff's data in battle
	m_add_result(0x1E)
	m_rtovar7		// Jeff's Sprite Changing status

Loop:
	m_get_var7
	m_get_mem8_at_result
	m_multijmp(3)
		short End
		short LoopBack
		short End
	m_jmp (End)
	
LoopBack:
	m_pause(1)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

JeffCreateTinyGhost: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(JEFF_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)	
	m_add_result(0x4E)	// Jeff's offset to the address
	m_add_result(0x1E)
	m_rtovar7		// Jeff's Sprite Changing status
	m_set_var6(0)	// Frame count for our Sine function in Y direction
	m_set_var3(0x40)// Frame count for our Sine function in x direction
	m_set_var5(0)	// Ghost Direction Flag to check to add or subtract y-pos from the sine function
	m_set_var2(0)	// Ghost Direction Flag to check to add or subtract x-pos from the sine function
	m_set_var4(0)	// Return Value from the Sine funciton
	m_asmcall(ASM_GetObjYPosToResult)
	m_rtovar0		// var0 is the initial position of the ghost sprite's y-Pos
	m_asmcall(ASM_GetObjXPosToResult)
	m_rtovar1		// var1 is the initial position of the ghost sprite's x-pos
	
Loop:
	m_get_var7
	m_get_mem8_at_result
	m_multijmp(3)
		short End
		short End
		short Continue
	m_jmp (End)
	
Continue:
	m_asmcall(ASM_CalcTinyGhostPos)
	
LoopBack:
	m_pause(2)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

CreateJeffBattleSprLogic: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(3)
	
	m_get_mem16(0x988B)
	m_and_result(0xFF)
	m_add_result(-1)
	m_jne(End)
	
	m_set_xpos(AS_JEFF_X_POS)
	m_set_ypos(AS_FRONT_ROW_Y_POS)
	m_set_facing_anim(NE, 0)
						
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)
	m_add_result(0x4E)
	m_rtovar7			// Var7 contains Jeff's Battler address
	m_set_result(0)	
	m_rtovar6			// Var6 is Jeff's possession/mushroomized status
						// 0x01 = Mushroomized, 0x02 = Possessed
	
Loop:
	m_get_flag(VICTORY_FLAG)
	m_jne(Victory)
	
	m_pause(1)
		
Attack:
	m_get_flag(JEFF_ATK_FLAG)
	m_jeq(Goods)
	
	m_unlock_text
	
	MOV_ChangeSpriteGroup(JEFF_ATK_SPRITE)
	JeffAttackAnimation
	
	m_unset_flag(JEFF_ATK_FLAG)
	m_jmp(Loop_Back)
	
Goods:
	m_get_flag(JEFF_GOODS_FLAG)
	m_jeq(Defend)
	
	MOV_ChangeSpriteGroup(JEFF_GOODS_SPRITE)
	
	GoodsLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		JeffGoodsAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short GoodsContinue
			short GoodsUnconscious
			short GoodsDiamondized
			
	GoodsContinue:
		m_get_flag(JEFF_GOODS_FLAG)
		m_jne(GoodsLockingWait)
		m_jmp(Loop_Back)
		
	GoodsUnconscious:
		m_unset_flag(JEFF_GOODS_FLAG)
		m_jmp(Unconscious)

	GoodsDiamondized:
		m_unset_flag(JEFF_GOODS_FLAG)
		m_jmp(Diamondized)
	
Defend:
	m_get_flag(JEFF_DEF_FLAG)
	m_jeq(Spy)
	
	MOV_ChangeSpriteGroup(JEFF_DEF_SPRITE)
	
	DefendLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		JeffDefendAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short DefendContinue
			short DefendUnconscious
			short DefendDiamondized
			
		DefendContinue:
			m_get_flag(JEFF_DEF_FLAG)
			m_jne(DefendLockingWait)
			m_jmp(Loop_Back)
		
		DefendUnconscious:
			m_unset_flag(JEFF_DEF_FLAG)
			m_jmp(Unconscious)
		
		DefendDiamondized:
			m_unset_flag(JEFF_DEF_FLAG)
			m_jmp(Diamondized)
	
Spy:
	m_get_flag(JEFF_SPY_FLAG)
	m_jeq(RunAway)
	
	MOV_ChangeSpriteGroup(JEFF_SPY_SPRITE)
	
	PSILockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		JeffSpyAnimation
			
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short SpyContinue
			short PSIUnconscious
			short PSIDiamondized
		
	SpyContinue:
		m_get_flag(JEFF_SPY_FLAG)
		m_jne(PSILockingWait)
		m_jmp(Loop_Back)
	
	PSIUnconscious:
		m_unset_flag(JEFF_SPY_FLAG)
		m_jmp(Unconscious)
		
	PSIDiamondized:
		m_unset_flag(JEFF_SPY_FLAG)
		m_jmp(Diamondized)
	
RunAway:
	m_get_flag(PARTY_RUNAWAY_FLAG)
	m_jeq(StatusAffiction)
	
	MOV_ChangeSpriteGroup(JEFF_RUNAWAY_SPRITE)
	
	RunawayLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		JeffRunawayAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short RunAwayContinue
			short RunAwayUnconscious
			short RunAwayDiamondized
		
	RunAwayContinue:
		m_get_flag(PARTY_RUNAWAY_FLAG)
		m_jne(RunawayLockingWait)
		m_jmp(Loop_Back)
		
	RunAwayUnconscious:
		m_jmp(Unconscious)
		
	RunAwayDiamondized:
		m_jmp(Diamondized)
	
StatusAffiction:
	CheckHomesickness:
		m_get_var7
		m_add_result(0x22)
		m_get_mem8_at_result
		m_jne(Homesickness)
	
	CheckCannotConcentrate:
		m_get_var7
		m_add_result(0x21)
		m_get_mem8_at_result
		m_jne(CannotConcentrate)
		
	CheckFeelingStrange:
		m_get_var7
		m_add_result(0x20)
		m_get_mem8_at_result
		m_jne(FeelingStrange)
		
	CheckInOverworldAffliction:
		m_get_var7
		m_add_result(0x1E)
		m_get_mem8_at_result
		m_multijmp(3)
			short CheckInBattleAffliction
			short Mashroomized
			short Possessed
		
	CheckInBattleAffliction:
		m_get_var7
		m_add_result(0x1F)
		m_get_mem8_at_result
		m_multijmp(5)
			short CheckPermanentAffliction
			short Sleeping
			short Crying
			short Immobilized
			short Solidified
		
	CheckPermanentAffliction:
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_jeq(Normal)
		m_multijmp(8)
			short Normal
			short Unconscious
			short Diamondized
			short Paralized
			short Nauseous
			short Poisoned
			short Sunstroke
			short Cold
	
Normal:
	MOV_ChangeSpriteGroup(JEFF_IDLE_SPRITE)
	JeffIdleAnimation
	m_jmp(Loop_Back)
	
Unconscious:
	MOV_ChangeSpriteGroup(JEFF_UNCON_SPRITE)
	JeffUnconsciousAnimation
	m_jmp(Loop_Back)
	
Diamondized:
	MOV_ChangeSpriteGroup(JEFF_DIA_SPRITE)
	JeffDiamondizedAnimation
	m_jmp(Loop_Back)

Paralized:
	MOV_ChangeSpriteGroup(JEFF_PARA_SPRITE)
	JeffParalizedAnimation
	m_jmp(Loop_Back)

Nauseous:
	MOV_ChangeSpriteGroup(JEFF_NAUS_SPRITE)
	JeffNauseousAnimation
	m_jmp(Loop_Back)
	
Poisoned:
	MOV_ChangeSpriteGroup(JEFF_POIS_SPRITE)
	JeffPoisonedAnimation
	m_jmp(Loop_Back)

Sunstroke:
	MOV_ChangeSpriteGroup(JEFF_SUNS_SPRITE)
	JeffSunstrokeAnimation
	m_jmp(Loop_Back)

Cold:
	MOV_ChangeSpriteGroup(JEFF_COLD_SPRITE)
	JeffColdAnimation
	m_jmp(Loop_Back)

Mashroomized:
	m_get_var6
	m_and_result(0x01)
	m_jne(Mashroomized_Continue)
	
	m_textcall2(Jeff_Create_Mushroom)
	m_get_var6
	m_or_result(0x01)
	m_rtovar6
	
	Mashroomized_Continue:
		MOV_ChangeSpriteGroup(JEFF_MUSH_SPRITE)
		JeffMashroomizedAnimation
		
	m_jmp(Loop_Back)

Possessed:
	m_get_var6
	m_and_result(0x02)
	m_jne(Possessed_Continue)
	
	m_textcall2(Jeff_Create_TinyGhost)
	m_get_var6
	m_or_result(0x02)
	m_rtovar6

	Possessed_Continue:
		MOV_ChangeSpriteGroup(JEFF_POSS_SPRITE)
		JeffPossessedAnimation
	
	m_jmp(Loop_Back)

Sleeping:
	MOV_ChangeSpriteGroup(JEFF_SLEEP_SPRITE)
	JeffSleepingAnimation
	m_jmp(Loop_Back)

Crying:
	MOV_ChangeSpriteGroup(JEFF_CRY_SPRITE)
	JeffCryingAnimation
	m_jmp(Loop_Back)

Immobilized:
	MOV_ChangeSpriteGroup(JEFF_IMMOB_SPRITE)
	JeffImmobilizedAnimation
	m_jmp(Loop_Back)

Solidified:
	MOV_ChangeSpriteGroup(JEFF_SOLID_SPRITE)
	JeffSolidifedAnimation
	m_jmp(Loop_Back)

FeelingStrange:
	MOV_ChangeSpriteGroup(JEFF_FEELS_SPRITE)
	JeffFeelingStrangeAnimation
	m_jmp(Loop_Back)

CannotConcentrate:
	MOV_ChangeSpriteGroup(JEFF_CNTCON_SPRITE)
	JeffCannotConcentrateAnimation
	m_jmp(Loop_Back)

Homesickness:
	MOV_ChangeSpriteGroup(JEFF_HMSIK_SPRITE)
	JeffHomesicknessAnimation
	m_jmp(Loop_Back)
	
Loop_Back:
	m_jmp(Loop)
	
Victory:
	// Turn around to face camera
	m_set_facing_anim(NE, 0)
	m_pause(5)
	m_set_facing_anim(E, 0)
	m_pause(5)
	m_set_facing_anim(SE, 0)
	m_pause(5)
	m_set_facing_anim(S, 0)
	m_pause(5)
	
	MOV_ChangeSpriteGroup(JEFF_VICTORY_SPRITE)
	
	VictoryAnimLoop:
		JeffVictoryAnimation
		m_jmp(VictoryAnimLoop)

End:
	m_destroy_self
}

define JeffIdleAnimation = {	
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffAffIdleAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffAttackAnimation = {
	m_set_facing_anim(NE, 0)
	
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
}

define JeffGoodsAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define JeffDefendAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define JeffSpyAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define JeffRunawayAnimation = {
	m_set_facing_anim(SW, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define JeffUnconsciousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffDiamondizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffParalizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffNauseousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffPoisonedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffSunstrokeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffColdAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffMashroomizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffPossessedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffSleepingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffCryingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffImmobilizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffSolidifedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffFeelingStrangeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffCannotConcentrateAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffHomesicknessAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define JeffVictoryAnimation = {
	m_set_facing_anim(S, 0)
	m_pause(1)
}

//+=+=+=+=+= POO ANIMATIONS =+=+=+=+=+=+

Poo_Create_Mushroom:
	BowsprCC_CreateSprite(226, PooCreateMushroom)
	eob
	
Poo_Create_TinyGhost:
	BowsprCC_CreateSprite(264, PooCreateTinyGhost)
	eob


PooCreateMushroom: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(POO_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)
	m_add_result(0x4E)
	m_add_result(0x4E)	// Offset to get Poo's data in battle
	m_add_result(0x1E)
	m_rtovar7		// Poo's Sprite Changing status

Loop:
	m_get_var7
	m_get_mem8_at_result
	m_multijmp(3)
		short End
		short LoopBack
		short End
	m_jmp (End)
	
LoopBack:
	m_pause(1)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

PooCreateTinyGhost: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(POO_IDLE_SPRITE)
	m_add_ypos(-0x0E)
	
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)
	m_add_result(0x4E)
	m_add_result(0x4E)	// Poo's offset to the address
	m_add_result(0x1E)
	m_rtovar7		// Poo's Sprite Changing status
	m_set_var6(0)	// Frame count for our Sine function in Y direction
	m_set_var3(0x40)// Frame count for our Sine function in x direction
	m_set_var5(0)	// Ghost Direction Flag to check to add or subtract y-pos from the sine function
	m_set_var2(0)	// Ghost Direction Flag to check to add or subtract x-pos from the sine function
	m_set_var4(0)	// Return Value from the Sine funciton
	m_asmcall(ASM_GetObjYPosToResult)
	m_rtovar0		// var0 is the initial position of the ghost sprite's y-Pos
	m_asmcall(ASM_GetObjXPosToResult)
	m_rtovar1		// var1 is the initial position of the ghost sprite's x-pos
	
Loop:
	m_get_var7
	m_get_mem8_at_result
	m_multijmp(3)
		short End
		short End
		short Continue
	m_jmp (End)
	
Continue:
	m_asmcall(ASM_CalcTinyGhostPos)
	
LoopBack:
	m_pause(2)
	m_jmp(Loop)
	
End:
	m_destroy_self
}

// TODO: Poo's mirror enemy isn't showing or displaying on the battle field, not sure
//       what could be the problem.....
PooCreateMirrorEnemy: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(0)
	
	m_set_facing_anim(N, 0)
	m_refresh_graphics
	m_warp_to_sprite(POO_MIRROR_SPRITE)
	
Loop:
	m_get_flag(VICTORY_FLAG)
	m_jne(End)
	
	m_set_result(POO_MIRROR_TURN_COUNT)
	m_get_mem8_at_result
	m_jeq(End)
	
LoopBack:
	// Animate the mirror sprite
	m_set_facing_anim(N, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	
	m_jmp(Loop)
	
End:
	m_sound(SND_PING)
	m_set_mem8(POO_MIRROR_TURN_COUNT, 0)
	m_destroy_self
}

CreatePooBattleSprLogic: {
	Vittorio_bowspr_preamble
	m_ontick_nop
	m_priority(3)
	
	m_get_mem16(0x988B)
	m_and_result(0xFF)
	m_add_result(-1)
	m_jne(End)
	
	m_set_xpos(AS_POO_X_POS)
	m_set_ypos(AS_BACK_ROW_Y_POS)
	m_set_facing_anim(NE, 0)
						
	m_set_result(PTY_BTLR_ADDR)
	m_add_result(0x4E)
	m_add_result(0x4E)
	m_add_result(0x4E)
	m_rtovar7			// Var7 contains Poo's Battler address
	m_set_result(0)	
	m_rtovar6			// Var6 is Poo's possession/mushroomized status
						// 0x01 = Mushroomized, 0x02 = Possessed
	
Loop:
	m_get_flag(VICTORY_FLAG)
	m_jne(Victory)
	
	m_pause(1)
		
Attack:
	m_get_flag(POO_ATK_FLAG)
	m_jeq(Goods)
	
	m_unlock_text
	
	MOV_ChangeSpriteGroup(POO_ATK_SPRITE)
	PooAttackAnimation
	
	m_unset_flag(POO_ATK_FLAG)
	m_jmp(Loop_Back)
	
Goods:
	m_get_flag(POO_GOODS_FLAG)
	m_jeq(Defend)
	
	MOV_ChangeSpriteGroup(POO_GOODS_SPRITE)
	
	GoodsLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PooGoodsAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short GoodsContinue
			short GoodsUnconscious
			short GoodsDiamondized
			
	GoodsContinue:
		m_get_flag(POO_GOODS_FLAG)
		m_jne(GoodsLockingWait)
		m_jmp(Loop_Back)
		
	GoodsUnconscious:
		m_unset_flag(POO_GOODS_FLAG)
		m_jmp(Unconscious)

	GoodsDiamondized:
		m_unset_flag(POO_GOODS_FLAG)
		m_jmp(Diamondized)
	
Defend:
	m_get_flag(POO_DEF_FLAG)
	m_jeq(PSI)
	
	MOV_ChangeSpriteGroup(POO_DEF_SPRITE)
	
	DefendLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PooDefendAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short DefendContinue
			short DefendUnconscious
			short DefendDiamondized
			
		DefendContinue:
			m_get_flag(POO_DEF_FLAG)
			m_jne(DefendLockingWait)
			m_jmp(Loop_Back)
		
		DefendUnconscious:
			m_unset_flag(POO_DEF_FLAG)
			m_jmp(Unconscious)
		
		DefendDiamondized:
			m_unset_flag(POO_DEF_FLAG)
			m_jmp(Diamondized)
	
PSI:
	m_get_flag(POO_PSI_FLAG)
	m_jeq(Mirror)
	
	MOV_ChangeSpriteGroup(POO_PSI_SPRITE)
	
	PSILockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PooPSIAnimation
			
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short PSIContinue
			short PSIUnconscious
			short PSIDiamondized
		
	PSIContinue:
		m_get_flag(POO_PSI_FLAG)
		m_jne(PSILockingWait)
		m_jmp(Loop_Back)
	
	PSIUnconscious:
		m_unset_flag(POO_PSI_FLAG)
		m_jmp(Unconscious)
		
	PSIDiamondized:
		m_unset_flag(POO_PSI_FLAG)
		m_jmp(Diamondized)
	
Mirror:
	m_set_result(POO_MIRROR_TURN_COUNT)
	m_get_mem8_at_result
	m_jeq(RunAway)
	
	// TODO: Will have to see the text that has Poo's mirror inside so we can set the flag
	//       in there instead of setting it in the battle_menu file.
	
	m_set_result(MIRROR_ENEMY_ID)
	m_get_mem8_at_result
	m_asmcall(ASM_ReturnEnemyOverworldSpriteID)
	m_asmcall(ASM_CreatePooMirrorSprite)
	
	MOV_ChangeSpriteGroup(POO_MIRROR_SPRITE)
	m_refresh_graphics
	
	MirrorLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PooMirrorAnimation
			
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short MirrorContinue
			short MirrorUnconscious
			short MirrorDiamondized
		
	MirrorContinue:
		m_set_result(POO_MIRROR_TURN_COUNT)
		m_get_mem8_at_result
		m_jne(MirrorLockingWait)
		m_jmp(Loop_Back)
	
	MirrorUnconscious:
		m_unset_flag(POO_PSI_FLAG)
		m_jmp(Unconscious)
		
	MirrorDiamondized:
		m_unset_flag(POO_PSI_FLAG)
		m_jmp(Diamondized)
	
RunAway:
	
	m_get_flag(PARTY_RUNAWAY_FLAG)
	m_jeq(StatusAffiction)
	
	MOV_ChangeSpriteGroup(POO_RUNAWAY_SPRITE)
	
	RunawayLockingWait:
		m_get_flag(VICTORY_FLAG)
		m_jne(Victory)
	
		PooRunawayAnimation
		
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_multijmp(3)
			short RunAwayContinue
			short RunAwayUnconscious
			short RunAwayDiamondized
		
	RunAwayContinue:
		m_get_flag(PARTY_RUNAWAY_FLAG)
		m_jne(RunawayLockingWait)
		m_jmp(Loop_Back)
		
	RunAwayUnconscious:
		m_jmp(Unconscious)
		
	RunAwayDiamondized:
		m_jmp(Diamondized)
	
StatusAffiction:
	CheckHomesickness:
		m_get_var7
		m_add_result(0x22)
		m_get_mem8_at_result
		m_jne(Homesickness)
	
	CheckCannotConcentrate:
		m_get_var7
		m_add_result(0x21)
		m_get_mem8_at_result
		m_jne(CannotConcentrate)
		
	CheckFeelingStrange:
		m_get_var7
		m_add_result(0x20)
		m_get_mem8_at_result
		m_jne(FeelingStrange)
		
	CheckInOverworldAffliction:
		m_get_var7
		m_add_result(0x1E)
		m_get_mem8_at_result
		m_multijmp(3)
			short CheckInBattleAffliction
			short Mashroomized
			short Possessed
		
	CheckInBattleAffliction:
		m_get_var7
		m_add_result(0x1F)
		m_get_mem8_at_result
		m_multijmp(5)
			short CheckPermanentAffliction
			short Sleeping
			short Crying
			short Immobilized
			short Solidified
		
	CheckPermanentAffliction:
		m_get_var7
		m_add_result(0x1D)
		m_get_mem8_at_result
		m_jeq(Normal)
		m_multijmp(8)
			short Normal
			short Unconscious
			short Diamondized
			short Paralized
			short Nauseous
			short Poisoned
			short Sunstroke
			short Cold
	
Normal:
	MOV_ChangeSpriteGroup(POO_IDLE_SPRITE)
	PooIdleAnimation
	m_jmp(Loop_Back)
	
Unconscious:
	MOV_ChangeSpriteGroup(POO_UNCON_SPRITE)
	PooUnconsciousAnimation
	m_jmp(Loop_Back)
	
Diamondized:
	MOV_ChangeSpriteGroup(POO_DIA_SPRITE)
	PooDiamondizedAnimation
	m_jmp(Loop_Back)

Paralized:
	MOV_ChangeSpriteGroup(POO_PARA_SPRITE)
	PooParalizedAnimation
	m_jmp(Loop_Back)

Nauseous:
	MOV_ChangeSpriteGroup(POO_NAUS_SPRITE)
	PooNauseousAnimation
	m_jmp(Loop_Back)
	
Poisoned:
	MOV_ChangeSpriteGroup(POO_POIS_SPRITE)
	PooPoisonedAnimation
	m_jmp(Loop_Back)

Sunstroke:
	MOV_ChangeSpriteGroup(POO_SUNS_SPRITE)
	PooSunstrokeAnimation
	m_jmp(Loop_Back)

Cold:
	MOV_ChangeSpriteGroup(POO_COLD_SPRITE)
	PooColdAnimation
	m_jmp(Loop_Back)

Mashroomized:
	m_get_var6
	m_and_result(0x01)
	m_jne(Mashroomized_Continue)
	
	m_textcall2(Poo_Create_Mushroom)
	m_get_var6
	m_or_result(0x01)
	m_rtovar6
	
	Mashroomized_Continue:
		MOV_ChangeSpriteGroup(POO_MUSH_SPRITE)
		PooMashroomizedAnimation
		
	m_jmp(Loop_Back)

Possessed:
	m_get_var6
	m_and_result(0x02)
	m_jne(Possessed_Continue)
	
	m_textcall2(Poo_Create_TinyGhost)
	m_get_var6
	m_or_result(0x02)
	m_rtovar6

	Possessed_Continue:
		MOV_ChangeSpriteGroup(POO_POSS_SPRITE)
		PooPossessedAnimation
	
	m_jmp(Loop_Back)

Sleeping:
	MOV_ChangeSpriteGroup(POO_SLEEP_SPRITE)
	PooSleepingAnimation
	m_jmp(Loop_Back)

Crying:
	MOV_ChangeSpriteGroup(POO_CRY_SPRITE)
	PooCryingAnimation
	m_jmp(Loop_Back)

Immobilized:
	MOV_ChangeSpriteGroup(POO_IMMOB_SPRITE)
	PooImmobilizedAnimation
	m_jmp(Loop_Back)

Solidified:
	MOV_ChangeSpriteGroup(POO_SOLID_SPRITE)
	PooSolidifedAnimation
	m_jmp(Loop_Back)

FeelingStrange:
	MOV_ChangeSpriteGroup(POO_FEELS_SPRITE)
	PooFeelingStrangeAnimation
	m_jmp(Loop_Back)

CannotConcentrate:
	MOV_ChangeSpriteGroup(POO_CNTCON_SPRITE)
	PooCannotConcentrateAnimation
	m_jmp(Loop_Back)

Homesickness:
	MOV_ChangeSpriteGroup(POO_HMSIK_SPRITE)
	PooHomesicknessAnimation
	m_jmp(Loop_Back)
	
Loop_Back:
	m_jmp(Loop)
	
Victory:
	// Turn around to face camera
	m_set_result(POO_MIRROR_TURN_COUNT)
	m_get_mem8_at_result
	m_jeq(VictoryContinue)
	
	// Waits until the mirror count turns 0, then change Poo to his idle sprite
	// It turns to 0 by the destruction of the mirrored enemy sprite
	VictoryMirrorLockingWait:
		m_set_result(POO_MIRROR_TURN_COUNT)
		m_get_mem8_at_result
		m_pause(1)
		m_jne(VictoryMirrorLockingWait)
		
	MOV_ChangeSpriteGroup(POO_IDLE_SPRITE) // Change to regular Poo idle sprite if mirrored
	m_refresh_graphics
	
	VictoryContinue:
		m_set_facing_anim(NE, 0)
		m_pause(5)
		m_set_facing_anim(E, 0)
		m_pause(5)
		m_set_facing_anim(SE, 0)
		m_pause(5)
		m_set_facing_anim(S, 0)
		m_pause(5)
	
	MOV_ChangeSpriteGroup(POO_VICTORY_SPRITE)
	
	VictoryAnimLoop:
		PooVictoryAnimation
		m_jmp(VictoryAnimLoop)

End:
	m_destroy_self
}

define PooIdleAnimation = {	
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooAffIdleAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooAttackAnimation = {
	m_set_facing_anim(NE, 0)
	
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
	m_refresh_graphics_frame0
	m_pause(10)
}

define PooGoodsAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PooDefendAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PooPSIAnimation = {
	m_set_facing_anim(NE, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PooMirrorAnimation = {
	m_set_facing_anim(N, 0)
	m_pause(10)
}

define PooRunawayAnimation = {
	m_set_facing_anim(SW, 0)
	m_refresh_graphics_frame0
	m_pause(10)
	m_refresh_graphics_frame1
	m_pause(10)
}

define PooUnconsciousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooDiamondizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooParalizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooNauseousAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooPoisonedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooSunstrokeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooColdAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooMashroomizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooPossessedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooSleepingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooCryingAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooImmobilizedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooSolidifedAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooFeelingStrangeAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooCannotConcentrateAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooHomesicknessAnimation = {
	m_set_facing_anim(NE, 0)
	m_pause(1)
}

define PooVictoryAnimation = {
	m_set_facing_anim(S, 0)
	m_pause(1)
}


//+=+=+=+=+=+= ASM =+=+=+=+=+=+=+
// Taken from the vanilla routines to return the current object's x and y coords on screen
// Thanks Catador
define Current_Object_Slot 	= 0x1A42
define OBJ_Script_Var0 		= 0x0E5E
define OBJ_Script_Var1		= 0x0E9A
define OBJ_Script_Var2		= 0x0ED6
define OBJ_Script_Var3		= 0x0F12
define OBJ_Script_Var4		= 0x0F4E
define OBJ_Script_Var5		= 0x0F8A
define OBJ_Script_Var6		= 0x0FC6
define OBJ_Script_Var7		= 0x1002




ASM_GetObjYPosToResult: {
	REP (0x31)
	PHD
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_map_y)
	PLD
	RTL
}

ASM_SetObjYPosFromResult: {
	REP (0x31)
	PHD
	TAY
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	TYA
	STA_x (OBJ_map_y)
	PLD
	RTL
}

ASM_GetObjXPosToResult: {
	REP (0x31)
	PHD
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_map_x)
	PLD
	RTL
}

ASM_SetObjXPosFromResult: {
	REP (0x31)
	PHD
	TAY
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	TYA
	STA_x (OBJ_map_x)
	PLD
	RTL
}


Sine:{
	TAX
	LDA_xl (0xC0B425) // Sine look-up table
	AND_i (0x007F)
	RTL
}

ASM_Divide16FromResult: {
	LSR
	LSR
	LSR
	LSR
	RTL
}

ASM_Divide8FromResult: {
	LSR
	LSR
	LSR
	RTL
}

ASM_ResultPlusVar0: {
	REP (0x31)
	PHD
	PHA
	TDC
	ADC_i (0xFFFE)
	TCD
	PLA
	
	TAY
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_Script_Var0)
	STA_d (0x02)
	TYA
	CLC
	ADC_d (0x02)
	
	PLD
	RTL
}

ASM_ResultPlusVar1: {
	REP (0x31)
	PHD
	PHA
	TDC
	ADC_i (0xFFFE)
	TCD
	PLA
	
	TAY
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_Script_Var1)
	STA_d (0x02)
	TYA
	CLC
	ADC_d (0x02)
	
	PLD
	RTL
}

// A: ID of the enemy in battle
// Returns: A: The enemy's Overworld Sprite ID
ASM_ReturnEnemyOverworldSpriteID: {
	REP (0x31)
	PHD
	PHA
	TDC
	ADC_i (0xFFEE)
	TCD
	PLA 
	
	LDY_i (0x5E)
	JSL (0xC09032)	// Multiply A and Y register, return result to A register
	CLC
	ADC_i (0x1E)	// Add the offset for the enemy's overworld sprite
	TAY				// Transfer result to Y register

	LDA_i (short[0] ENEMY_CONFIG_TABLE)
	STA_d (0x02)
	LDA_i (short[1] ENEMY_CONFIG_TABLE)
	STA_d (0x04)
	
	LDA_dly (0x02)	// Load in the enemy's overworld sprite ID
	
	PLD
	RTL
}

ASM_CreatePooMirrorSprite: {
	REP (0x31)
	PHD
	PHA
	TDC
	ADC_i (0xFFEE)
	TCD
	PLA 
	
	STA_d (0x02)
	LDA_i (short[0] PooCreateMirrorEnemy)
	STA_d (0x0E)
	LDA_i (short[1] PooCreateMirrorEnemy)
	STA_d (0x10)
	
	LDA_d (0x02)
	JSL (ASM_BowsprCreateEntity)
	
	PLD
	RTL
}

ASM_CalcTinyGhostPos: {
	REP (0x31)
	PHD
	TDC
	ADC_i (0xFFEE)
	TCD 

	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_Script_Var6)
	STA_d (0x0C)
	LDA_x (OBJ_Script_Var5)
	STA_d (0x0A)
	STZ_d (0x08)
	
	LDA_d (0x0C)					// m_get_var6
	AND_i (0x00FF)
	JSL (Sine)						// m_asmcall(Sine)
	
	LSR
	LSR
	LSR
	LSR								// m_asmcall(ASM_Divide16FromResult)
	
	STA_d (0x08)					// m_rtovar4
	
	LDA_d (0x0A)					// m_get_var5
	BNE_a (GhostFloatYPos)			// m_jne(GhostFloatYPos)
	
	GoingUp:  // This is when the ghost sprite is going up, usually goes down first
		LDA_d (0x08)				// m_get_var4
		EOR_i (0xFFFF)				// m_xor_result(0xFFFF)
		INC							// m_add_result(0x01)
		STA_d (0x08)				// m_rtovar4
	
GhostFloatYPos:
	LDA_a (Current_Object_Slot)		
	ASL
	TAX
	LDA_x (OBJ_Script_Var0)
	CLC			
	ADC_d (0x08)					// m_get_var4 + m_asmcall(ASM_ResultPlusVar0)
	JSL (ASM_SetObjYPosFromResult)	// m_asmcall(ASM_SetObjYPosFromResult)
	
	INC_d (0x0C)					// m_get_var6 + m_add_result(1) + m_rtovar6
	LDA_d (0x0C)
	AND_i (0x0080)					// m_and_result(0x80)
	BEQ_a (CheckXDirection)			// m_jeq(CheckXDirection)
	
	ChangeFloatingDirectionYPos:
		LDA_d (0x0A)				// m_get_var5
		EOR_i (0x0001)				// m_xor_result(0x01)
		AND_i (0x0001)				// m_and_result(0x01)
		STA_d (0x0A)				// m_rtovar5
		STZ_d (0x0C)				// m_set_var6(0)
	
CheckXDirection:
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_Script_Var3)
	STA_d (0x06)
	LDA_x (OBJ_Script_Var2)
	STA_d (0x04)
	STZ_d (0x08)
	
	LDA_d (0x06)					// m_get_var3
	AND_i (0x00FF)
	JSL (Sine)						// m_asmcall(Sine)
	
	LSR
	LSR	
	LSR								// m_asmcall(ASM_Divide8FromResult)
	
	STA_d (0x08)					// m_rtovar4
	
	LDA_d (0x04)					// m_get_var2
	BNE_a (GhostFloatXPos)			// m_jne(GhostFloatXPos)

	GoingLeft:
		LDA_d (0x08)				// m_get_var4
		EOR_i (0xFFFF)				// m_xor_result(0xFFFF)
		INC							// m_add_result(0x01)
		STA_d (0x08)				// m_rtovar4
	
GhostFloatXPos:
	LDA_a (Current_Object_Slot)
	ASL
	TAX
	LDA_x (OBJ_Script_Var1)
	CLC
	ADC_d (0x08)					// m_get_var4 + m_asmcall(ASM_ResultPlusVar1)
	JSL (ASM_SetObjXPosFromResult)	// m_asmcall(ASM_SetObjXPosFromResult)

	INC_d (0x06)					// m_get_var3 + m_add_result(1) + m_rtovar3
	LDA_d (0x06)
	AND_i (0x0080)					// m_and_result(0x80)
	BEQ_a (Return)					// m_jeq(Return)
	
	ChangeFloatingDirectionXPos:
		LDA_d (0x04)				// m_get_var2
		EOR_i (0x0001)				// m_xor_result(0x01)
		AND_i (0x0001)				// m_and_result(0x01)
		STA_d (0x04)				// m_rtovar2
		STZ_d (0x06)				// m_set_var3(0)
	
// Set back all of the DPR values back into the Object's Var values
Return:
	LDA_a (Current_Object_Slot)
	ASL
	STA_d (0x02)
	
	CLC
	ADC_i (OBJ_Script_Var2)
	TAX
	LDA_d (0x04)
	STA_x (0x0000)
	
	LDA_d (0x02)
	CLC
	ADC_i (OBJ_Script_Var3)
	TAX
	LDA_d (0x06)
	STA_x (0x0000)
	
	LDA_d (0x02)
	CLC
	ADC_i (OBJ_Script_Var5)
	TAX
	LDA_d (0x0A)
	STA_x (0x0000)

	LDA_d (0x02)
	CLC
	ADC_i (OBJ_Script_Var6)
	TAX
	LDA_d (0x0C)
	STA_x (0x0000)

	PLD
	RTL
}